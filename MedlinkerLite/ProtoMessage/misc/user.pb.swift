// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: misc/user.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Protocol_Message_Misc_User: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".User"

  /// 为系统用户时: 0=系统消息 1=业务处理 2=新的朋友 3=医生助手
  var id: Int64 = 0

  /// 目前用户类型: 0=医联用户, 1=经纪人用户 9=系统用户
  var reference: Int32 = 0

  var name: String = String()

  var avatar: String = String()

  /// 医联用户角色(仅reference=0时有效): 1=医生用户 2=机构用户 3=手机注册用户 4=游客(仅redis) 5=微信 6=QQ 11=营销平台患者 33=第三方账号
  var type: Int32 = 0

  ///用户所在医院
  var hospital: String = String()

  /// 职称
  var title: String = String()

  /// 科室
  var section: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.reference)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.avatar)
      case 5: try decoder.decodeSingularInt32Field(value: &self.type)
      case 6: try decoder.decodeSingularStringField(value: &self.hospital)
      case 7: try decoder.decodeSingularStringField(value: &self.title)
      case 8: try decoder.decodeSingularStringField(value: &self.section)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.reference != 0 {
      try visitor.visitSingularInt32Field(value: self.reference, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 4)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 5)
    }
    if !self.hospital.isEmpty {
      try visitor.visitSingularStringField(value: self.hospital, fieldNumber: 6)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 7)
    }
    if !self.section.isEmpty {
      try visitor.visitSingularStringField(value: self.section, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protocol.message.misc"

extension Protocol_Message_Misc_User: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "reference"),
    3: .same(proto: "name"),
    4: .same(proto: "avatar"),
    5: .same(proto: "type"),
    6: .same(proto: "hospital"),
    7: .same(proto: "title"),
    8: .same(proto: "section"),
  ]

  func _protobuf_generated_isEqualTo(other: Protocol_Message_Misc_User) -> Bool {
    if self.id != other.id {return false}
    if self.reference != other.reference {return false}
    if self.name != other.name {return false}
    if self.avatar != other.avatar {return false}
    if self.type != other.type {return false}
    if self.hospital != other.hospital {return false}
    if self.title != other.title {return false}
    if self.section != other.section {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
