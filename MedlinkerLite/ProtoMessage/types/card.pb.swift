// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: types/card.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Protocol_Message_Types_Card: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Card"

  /// 卡片类型 由native约定
  var type: Int32 = 0

  /// 标签
  var label: String = String()

  /// 标题
  var title: String = String()

  /// 副标题
  var subtitle: String = String()

  /// 摘要
  var summary: String = String()

  /// 图片
  var image: String = String()

  /// 链接
  var url: String = String()

  /// 显示位置 0:系统消息会话; 1:toast only; 2:会话+toast
  var display: Int32 = 0

  /// card 特定type的额外信息
  var extra: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.label)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeSingularStringField(value: &self.subtitle)
      case 5: try decoder.decodeSingularStringField(value: &self.summary)
      case 6: try decoder.decodeSingularStringField(value: &self.image)
      case 7: try decoder.decodeSingularStringField(value: &self.url)
      case 8: try decoder.decodeSingularInt32Field(value: &self.display)
      case 9: try decoder.decodeSingularStringField(value: &self.extra)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.subtitle.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitle, fieldNumber: 4)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularStringField(value: self.summary, fieldNumber: 5)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 6)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 7)
    }
    if self.display != 0 {
      try visitor.visitSingularInt32Field(value: self.display, fieldNumber: 8)
    }
    if !self.extra.isEmpty {
      try visitor.visitSingularStringField(value: self.extra, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protocol.message.types"

extension Protocol_Message_Types_Card: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "label"),
    3: .same(proto: "title"),
    4: .same(proto: "subtitle"),
    5: .same(proto: "summary"),
    6: .same(proto: "image"),
    7: .same(proto: "url"),
    8: .same(proto: "display"),
    9: .same(proto: "extra"),
  ]

  func _protobuf_generated_isEqualTo(other: Protocol_Message_Types_Card) -> Bool {
    if self.type != other.type {return false}
    if self.label != other.label {return false}
    if self.title != other.title {return false}
    if self.subtitle != other.subtitle {return false}
    if self.summary != other.summary {return false}
    if self.image != other.image {return false}
    if self.url != other.url {return false}
    if self.display != other.display {return false}
    if self.extra != other.extra {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
